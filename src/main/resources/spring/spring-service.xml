<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描service包(包含子包)下所有使用注解的类型-->
    <context:component-scan base-package="com.cbl.springPractice.service"></context:component-scan>

    <!--配置事务管理器(mybatis采用的是JDBC的事务管理器)-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置基于注解的声明式事务,默认使用注解来管理事务行为-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- 配置事务通知（事务增强） -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="transfer" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    &lt;!&ndash; 配置切面 &ndash;&gt;
    <aop:config>
        &lt;!&ndash; 配置切入点 &ndash;&gt;
        <aop:pointcut id="pointcut1" expression="execution(* com.cbl.springPractice.service.IAccountService+.*(..))" />
        &lt;!&ndash; 配置切面 &ndash;&gt;
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1" />
    </aop:config>
-->


    <!-- 基于TransactionProxyFactoryBean的事务管理方式 -->
    <!--&lt;!&ndash;配置事务管理器(mybatis采用的是JDBC的事务管理器)&ndash;&gt;
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    &lt;!&ndash; 配置业务层的代理 &ndash;&gt;
    <bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" >
        &lt;!&ndash; 配置目标对象 &ndash;&gt;
        <property name="target" ref="accountService" />
        &lt;!&ndash; 注入事务管理器 &ndash;&gt;
        <property name="transactionManager" ref="transactionManager" />
        &lt;!&ndash; 注入事务属性 &ndash;&gt;
        <property name="transactionAttributes">
            <props>
                &lt;!&ndash; prop格式
                 PROPAGATION:
                 ISOLATION:
                 readOnly:
                 -Exception:
                 +Exception:
                 &ndash;&gt;
                <prop key="transfer">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>-->

    <!-- 注册拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/login/init"/>
            <bean class="com.cbl.springPractice.interceptor.InterceptorExample1" />
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 注册拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/login/init5"/>
            <bean class="com.cbl.springPractice.interceptor.InterceptorExample1" />
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- AspectJ aop测试 -->
    <aop:aspectj-autoproxy />
    <bean id="roleAspect" class="com.cbl.springPractice.aop.aspectJ.RoleAspect"/>
    <bean id="roleService" class="com.cbl.springPractice.aop.aspectJ.RoleServiceimpl"/>

</beans>
